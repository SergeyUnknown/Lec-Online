// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LecOnline.Core.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ManageRequestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ManageRequests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ManageRequests", "In order to prevent authorized access\nAs a server\nI want to be provide informatio" +
                    "n about which operation is allowed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ManageRequests")))
            {
                LecOnline.Core.Tests.ManageRequestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CreateRequest(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create request", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
   testRunner.And("Request from client 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("Common.Create action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CreateRequest_Administrator()
        {
            this.CreateRequest("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void CreateRequest_Manager()
        {
            this.CreateRequest("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void CreateRequest_MedicalCenter()
        {
            this.CreateRequest("MedicalCenter", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CreateRequest_EthicalCommitteeMember()
        {
            this.CreateRequest("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingCreatedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing created request for same client", exampleTags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
   testRunner.And("Request status is \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingCreatedRequestForSameClient_Administrator()
        {
            this.EditingCreatedRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingCreatedRequestForSameClient_Manager()
        {
            this.EditingCreatedRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingCreatedRequestForSameClient_MedicalCenter()
        {
            this.EditingCreatedRequestForSameClient("MedicalCenter", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingCreatedRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingCreatedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingRequestForDifferentClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing request for different client", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
   testRunner.And("Request from client 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingRequestForDifferentClient_Administrator()
        {
            this.EditingRequestForDifferentClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForDifferentClient_Manager()
        {
            this.EditingRequestForDifferentClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForDifferentClient_MedicalCenter()
        {
            this.EditingRequestForDifferentClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForDifferentClient_EthicalCommitteeMember()
        {
            this.EditingRequestForDifferentClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void DeletingRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting request for same client", exampleTags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then(string.Format("Common.Delete action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void DeletingRequestForSameClient_Administrator()
        {
            this.DeletingRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void DeletingRequestForSameClient_Manager()
        {
            this.DeletingRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void DeletingRequestForSameClient_MedicalCenter()
        {
            this.DeletingRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void DeletingRequestForSameClient_EthicalCommitteeMember()
        {
            this.DeletingRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void DeletingRequestForDifferentClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting request for different client", exampleTags);
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
   testRunner.And("Request from client 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then(string.Format("Common.Delete action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void DeletingRequestForDifferentClient_Administrator()
        {
            this.DeletingRequestForDifferentClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void DeletingRequestForDifferentClient_Manager()
        {
            this.DeletingRequestForDifferentClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void DeletingRequestForDifferentClient_MedicalCenter()
        {
            this.DeletingRequestForDifferentClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting request for different client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void DeletingRequestForDifferentClient_EthicalCommitteeMember()
        {
            this.DeletingRequestForDifferentClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingSubmittedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing submitted request for same client", exampleTags);
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
   testRunner.And("Request status is \'Submitted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingSubmittedRequestForSameClient_Administrator()
        {
            this.EditingSubmittedRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingSubmittedRequestForSameClient_Manager()
        {
            this.EditingSubmittedRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingSubmittedRequestForSameClient_MedicalCenter()
        {
            this.EditingSubmittedRequestForSameClient("MedicalCenter", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingSubmittedRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingSubmittedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingAcceptedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing accepted request for same client", exampleTags);
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
   testRunner.And("Request status is \'Accepted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing accepted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingAcceptedRequestForSameClient_Administrator()
        {
            this.EditingAcceptedRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing accepted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingAcceptedRequestForSameClient_Manager()
        {
            this.EditingAcceptedRequestForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing accepted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingAcceptedRequestForSameClient_MedicalCenter()
        {
            this.EditingAcceptedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing accepted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingAcceptedRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingAcceptedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingRequestForWhichSetMeetingForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing request for which set meeting for same client", exampleTags);
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
   testRunner.And("Request status is \'MeetingSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for which set meeting for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingRequestForWhichSetMeetingForSameClient_Administrator()
        {
            this.EditingRequestForWhichSetMeetingForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for which set meeting for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForWhichSetMeetingForSameClient_Manager()
        {
            this.EditingRequestForWhichSetMeetingForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for which set meeting for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForWhichSetMeetingForSameClient_MedicalCenter()
        {
            this.EditingRequestForWhichSetMeetingForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request for which set meeting for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestForWhichSetMeetingForSameClient_EthicalCommitteeMember()
        {
            this.EditingRequestForWhichSetMeetingForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingProcessingRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing processing request for same client", exampleTags);
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
   testRunner.And("Request status is \'Processing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing processing request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingProcessingRequestForSameClient_Administrator()
        {
            this.EditingProcessingRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing processing request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingProcessingRequestForSameClient_Manager()
        {
            this.EditingProcessingRequestForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing processing request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingProcessingRequestForSameClient_MedicalCenter()
        {
            this.EditingProcessingRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing processing request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingProcessingRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingProcessingRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingInvalidRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing invalid request for same client", exampleTags);
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
   testRunner.And("Request status is \'InvalidSubmission\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing invalid request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingInvalidRequestForSameClient_Administrator()
        {
            this.EditingInvalidRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing invalid request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingInvalidRequestForSameClient_Manager()
        {
            this.EditingInvalidRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing invalid request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingInvalidRequestForSameClient_MedicalCenter()
        {
            this.EditingInvalidRequestForSameClient("MedicalCenter", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing invalid request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingInvalidRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingInvalidRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingRequestWhichNeedMoreInformationForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing request which need more information for same client", exampleTags);
#line 151
this.ScenarioSetup(scenarioInfo);
#line 152
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 153
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
   testRunner.And("Request status is \'NeedMoreInformation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request which need more information for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingRequestWhichNeedMoreInformationForSameClient_Administrator()
        {
            this.EditingRequestWhichNeedMoreInformationForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request which need more information for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingRequestWhichNeedMoreInformationForSameClient_Manager()
        {
            this.EditingRequestWhichNeedMoreInformationForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request which need more information for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingRequestWhichNeedMoreInformationForSameClient_MedicalCenter()
        {
            this.EditingRequestWhichNeedMoreInformationForSameClient("MedicalCenter", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing request which need more information for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingRequestWhichNeedMoreInformationForSameClient_EthicalCommitteeMember()
        {
            this.EditingRequestWhichNeedMoreInformationForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void EditingResolvedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing resolved request for same client", exampleTags);
#line 166
this.ScenarioSetup(scenarioInfo);
#line 167
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
   testRunner.And("Request status is \'Resolved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 172
 testRunner.Then(string.Format("Common.Edit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing resolved request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void EditingResolvedRequestForSameClient_Administrator()
        {
            this.EditingResolvedRequestForSameClient("Administrator", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing resolved request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingResolvedRequestForSameClient_Manager()
        {
            this.EditingResolvedRequestForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing resolved request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingResolvedRequestForSameClient_MedicalCenter()
        {
            this.EditingResolvedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing resolved request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void EditingResolvedRequestForSameClient_EthicalCommitteeMember()
        {
            this.EditingResolvedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void SubmittingCreatedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submitting created request for same client", exampleTags);
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
   testRunner.And("Request status is \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.Then(string.Format("Request.Submit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingCreatedRequestForSameClient_Administrator()
        {
            this.SubmittingCreatedRequestForSameClient("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void SubmittingCreatedRequestForSameClient_Manager()
        {
            this.SubmittingCreatedRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingCreatedRequestForSameClient_MedicalCenter()
        {
            this.SubmittingCreatedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingCreatedRequestForSameClient_EthicalCommitteeMember()
        {
            this.SubmittingCreatedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void SubmittingSubmittedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submitting submitted request for same client", exampleTags);
#line 196
this.ScenarioSetup(scenarioInfo);
#line 197
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 198
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
   testRunner.And("Request status is \'Submitted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
 testRunner.Then(string.Format("Request.Submit action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingSubmittedRequestForSameClient_Administrator()
        {
            this.SubmittingSubmittedRequestForSameClient("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingSubmittedRequestForSameClient_Manager()
        {
            this.SubmittingSubmittedRequestForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingSubmittedRequestForSameClient_MedicalCenter()
        {
            this.SubmittingSubmittedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submitting submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SubmittingSubmittedRequestForSameClient_EthicalCommitteeMember()
        {
            this.SubmittingSubmittedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void RevokeCreatedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revoke created request for same client", exampleTags);
#line 211
this.ScenarioSetup(scenarioInfo);
#line 212
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
   testRunner.And("Request status is \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.Then(string.Format("Request.Revoke action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeCreatedRequestForSameClient_Administrator()
        {
            this.RevokeCreatedRequestForSameClient("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeCreatedRequestForSameClient_Manager()
        {
            this.RevokeCreatedRequestForSameClient("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeCreatedRequestForSameClient_MedicalCenter()
        {
            this.RevokeCreatedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke created request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeCreatedRequestForSameClient_EthicalCommitteeMember()
        {
            this.RevokeCreatedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void RevokeSubmittedRequestForSameClient(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revoke submitted request for same client", exampleTags);
#line 226
this.ScenarioSetup(scenarioInfo);
#line 227
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 228
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
   testRunner.And("Request status is \'Submitted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then(string.Format("Request.Revoke action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeSubmittedRequestForSameClient_Administrator()
        {
            this.RevokeSubmittedRequestForSameClient("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "True")]
        public virtual void RevokeSubmittedRequestForSameClient_Manager()
        {
            this.RevokeSubmittedRequestForSameClient("Manager", "True", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeSubmittedRequestForSameClient_MedicalCenter()
        {
            this.RevokeSubmittedRequestForSameClient("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revoke submitted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void RevokeSubmittedRequestForSameClient_EthicalCommitteeMember()
        {
            this.RevokeSubmittedRequestForSameClient("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set meeting for accepted request for same client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void SetMeetingForAcceptedRequestForSameClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set meeting for accepted request for same client", ((string[])(null)));
#line 241
this.ScenarioSetup(scenarioInfo);
#line 242
 testRunner.Given("User with role EthicalCommitteeMember", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
   testRunner.And("User is secretary for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
   testRunner.And("Request status is \'Accepted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
 testRunner.Then("Request.SetMeeting action True in the actions list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SetMeetingForAcceptedRequestForSameClientWhenNoSecretary(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set meeting for accepted request for same client when no secretary", exampleTags);
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
   testRunner.And("Request status is \'Accepted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
 testRunner.Then(string.Format("Request.SetMeeting action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set meeting for accepted request for same client when no secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SetMeetingForAcceptedRequestForSameClientWhenNoSecretary_Administrator()
        {
            this.SetMeetingForAcceptedRequestForSameClientWhenNoSecretary("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set meeting for accepted request for same client when no secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SetMeetingForAcceptedRequestForSameClientWhenNoSecretary_Manager()
        {
            this.SetMeetingForAcceptedRequestForSameClientWhenNoSecretary("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set meeting for accepted request for same client when no secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SetMeetingForAcceptedRequestForSameClientWhenNoSecretary_MedicalCenter()
        {
            this.SetMeetingForAcceptedRequestForSameClientWhenNoSecretary("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set meeting for accepted request for same client when no secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void SetMeetingForAcceptedRequestForSameClientWhenNoSecretary_EthicalCommitteeMember()
        {
            this.SetMeetingForAcceptedRequestForSameClientWhenNoSecretary("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        public virtual void CouldNotStartMeetingWhenNotSecretaryOrChairman(string rolename, string contains, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Could not start meeting when not secretary or chairman", exampleTags);
#line 268
this.ScenarioSetup(scenarioInfo);
#line 269
 testRunner.Given(string.Format("User with role {0}", rolename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 270
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
   testRunner.And("Request status is \'MeetingSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then(string.Format("Request.StartMeeting action {0} in the actions list", contains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could not start meeting when not secretary or chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Administrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CouldNotStartMeetingWhenNotSecretaryOrChairman_Administrator()
        {
            this.CouldNotStartMeetingWhenNotSecretaryOrChairman("Administrator", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could not start meeting when not secretary or chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CouldNotStartMeetingWhenNotSecretaryOrChairman_Manager()
        {
            this.CouldNotStartMeetingWhenNotSecretaryOrChairman("Manager", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could not start meeting when not secretary or chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "MedicalCenter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CouldNotStartMeetingWhenNotSecretaryOrChairman_MedicalCenter()
        {
            this.CouldNotStartMeetingWhenNotSecretaryOrChairman("MedicalCenter", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could not start meeting when not secretary or chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:rolename", "EthicalCommitteeMember")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:contains", "False")]
        public virtual void CouldNotStartMeetingWhenNotSecretaryOrChairman_EthicalCommitteeMember()
        {
            this.CouldNotStartMeetingWhenNotSecretaryOrChairman("EthicalCommitteeMember", "False", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could start meeting when secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void CouldStartMeetingWhenSecretary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Could start meeting when secretary", ((string[])(null)));
#line 285
this.ScenarioSetup(scenarioInfo);
#line 286
 testRunner.Given("User with role EthicalCommitteeMember", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 287
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
   testRunner.And("User is secretary for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
   testRunner.And("Request status is \'MeetingSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
 testRunner.Then("Request.StartMeeting action True in the actions list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could start meeting when chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void CouldStartMeetingWhenChairman()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Could start meeting when chairman", ((string[])(null)));
#line 296
this.ScenarioSetup(scenarioInfo);
#line 297
 testRunner.Given("User with role EthicalCommitteeMember", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 298
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
   testRunner.And("User is chairman for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
   testRunner.And("Request status is \'MeetingSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 305
 testRunner.Then("Request.StartMeeting action True in the actions list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could not stop meeting when secretary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void CouldNotStopMeetingWhenSecretary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Could not stop meeting when secretary", ((string[])(null)));
#line 307
this.ScenarioSetup(scenarioInfo);
#line 308
 testRunner.Given("User with role EthicalCommitteeMember", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
   testRunner.And("User is secretary for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
   testRunner.And("Request status is \'Processing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 316
 testRunner.Then("Request.StopMeeting action False in the actions list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Could stop meeting when chairman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void CouldStopMeetingWhenChairman()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Could stop meeting when chairman", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
 testRunner.Given("User with role EthicalCommitteeMember", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
   testRunner.And("Belongs to client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
   testRunner.And("Belongs to committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
   testRunner.And("User is chairman for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
   testRunner.And("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
   testRunner.And("Request for committee 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
   testRunner.And("Request status is \'Processing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.When("Get actions for request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 327
 testRunner.Then("Request.StopMeeting action True in the actions list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Meeting should start when start time passed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManageRequests")]
        public virtual void MeetingShouldStartWhenStartTimePassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Meeting should start when start time passed", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line 330
testRunner.Given("Request from client 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 331
  testRunner.And("has meeting started 2 minutes ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.When("server start pending meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 333
 testRunner.Then("Request status now is \'Processing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
